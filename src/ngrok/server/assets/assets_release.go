// Code generated by go-bindata.
// sources:
// assets/server/tls/snakeoil.crt
// assets/server/tls/snakeoil.key
// DO NOT EDIT!

// +build release

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x93\x39\xd3\xba\x48\x18\xc4\x73\x3e\xc5\xe6\xd4\x16\x20\x20\x2f\xe1\x0c\xb7\x32\xe0\xc8\x31\x40\x26\xa0\xc3\x21\x82\x28\x87\x7c\xfa\xf5\xff\x06\x1b\xec\x3e\xd9\xf3\x0b\xba\xba\xbb\xaa\xff\xfe\x73\xd0\xb0\x1c\xef\x2f\xcd\x38\x87\x8e\xe9\x68\x20\x34\x7e\x29\x83\x1c\x47\x1b\x1b\x4d\x03\x59\xaa\x69\x58\xf7\x61\x38\x06\x1f\xa1\xe7\x39\x1d\x78\x90\xb6\xcf\xaa\xad\x2d\x75\xe1\x21\xc0\x91\x09\x74\x90\xa1\x73\xb1\x98\x38\xd5\x63\x8c\x75\x1d\xc8\x2d\x93\x26\xe7\xaa\xb4\xe3\x29\xef\xe2\x97\xfb\xa8\xe4\x6b\x03\xae\xe6\xc2\xaf\xde\x66\x2c\x68\x03\x8b\xb7\x45\x2b\xda\xaa\xcb\x97\x6d\x28\x04\x22\xd2\xdb\x7f\x19\x82\xed\xca\x98\x1b\x88\x21\xf5\x62\x08\x10\xd2\xbb\xaf\x98\x65\xf2\x25\x91\xa7\x8c\x2c\xd3\xd5\xbe\xef\xbf\x0e\xa1\xd3\xfc\xd7\x8d\x61\x02\xe0\x6b\x00\xff\x80\x3f\x11\xa0\x46\x8f\xdf\xc7\x00\xaf\x7b\x52\x8a\xad\x5a\xea\x56\xc4\x09\x76\x15\x13\x2b\xda\xef\x87\xa2\xd5\x6d\x65\x5e\x4f\x9f\x52\x30\x87\xa9\x2b\x5e\xaf\x47\x38\x26\x15\xac\xe5\x43\xa3\x12\x66\xf1\x07\x2f\x40\x93\xa5\x05\x9c\xa5\xac\xd9\x64\xc8\x12\x7b\x6e\xa0\x41\xa5\xb9\x9e\x7b\x85\xbf\xaf\x0a\x77\xda\xd9\x48\x89\xf7\x22\x8b\xac\xe5\xe9\xf5\xc6\x0b\x3c\xf2\xf1\xd9\xb0\x91\xf0\xb9\x32\xf1\x5b\x6c\xe7\x67\x2a\x27\x0e\x8c\xef\xe5\x30\xab\xc6\xf1\xa3\xdb\xea\xae\x7c\x67\x2b\x71\xfb\x82\xb0\x7d\x74\x56\xd3\xa1\xa9\x5a\xc7\x93\x1f\xc2\x6b\x28\xb4\x4c\xed\x69\x64\x87\x89\xab\xc6\x22\x83\x7e\x4c\x7e\xc6\xe5\x14\x1c\x1a\x6d\x61\xc5\xae\x51\xd9\xa9\xf2\x1f\xbd\x62\x0b\xef\x7d\xf8\xf4\x77\xa3\xb2\x53\x76\x64\xb1\xef\x38\xa0\xb0\x9d\xe7\x2e\x3e\x27\x3a\x39\x0a\x72\x21\xa1\x3b\xd7\x33\x35\x89\x4f\x41\x95\xad\x69\x8a\x71\x16\x6e\x44\x54\x22\xa5\xba\xc2\xa4\xc1\xb5\xbe\xeb\x0b\x8c\xb1\x63\xbd\x0e\xe2\x48\x6f\x0b\x40\x14\xd9\x43\x96\x56\x2a\xf2\xc7\x41\x97\x82\x4c\xa8\x25\x26\xf1\x49\x11\x76\xcd\x92\x79\x34\x6f\x09\xcb\xdb\xd4\xb7\x3a\x98\xb9\x3f\x58\x48\x5b\xe1\xc2\x66\xd8\xd1\x01\x06\x10\x01\xfe\xdb\xd3\xd3\x0a\x9c\x5c\xd4\xb1\x01\x21\x8e\x00\x90\x1c\xc8\x00\x0c\xa9\x54\xee\xf3\xd9\x3c\x74\x0b\xe6\xca\x70\x38\xd5\x35\xbd\x6b\xf9\x3e\xae\x9b\xe2\x5d\x5d\xee\x31\xfd\x71\x2f\xd6\xfe\x9b\xe0\x73\xeb\x36\xd9\x95\xde\x71\x9d\xcf\xe1\x4d\x5f\xcc\x84\x88\xcc\x57\x3f\xae\xaf\x84\x1a\x8e\x7f\x23\xd2\x83\xb8\xd7\x1b\xc7\x71\xe1\x2a\x79\xe8\x74\xb9\x1d\x69\xff\x5a\xd3\xa3\xb0\x4e\x06\xb1\xb4\x42\x7e\xa2\x56\x31\xc3\x30\x20\x95\xb2\x01\xfa\x2e\x50\xc6\x9c\xa4\x9d\xec\x5d\x0b\xd7\x40\xec\x28\xa4\xdb\x28\x4d\x6b\xfa\x58\xf8\x77\x3f\x7e\x74\x78\x49\xdc\xd4\xb7\x9a\x8b\xc2\x76\xb9\xb4\x0e\x85\x90\xeb\x28\xfc\xe4\xeb\x52\x1d\x4a\xa7\x76\xb4\x74\xac\x19\x2d\xd8\x29\x9f\xbc\x5d\x72\x2a\xf2\x52\xde\x79\x3b\x67\x01\xe0\x43\x5f\x6e\x9e\x18\x8a\xd9\x7a\x91\x2a\x9c\x8a\xce\x53\x92\x42\x3d\x81\xcd\x0a\x78\x21\xe8\x5f\x07\xbf\x6e\x92\x84\x76\x2c\xc9\x98\x62\x54\xa1\x74\x18\xfc\x33\x1d\xd3\x07\xf8\x3c\xe6\x4c\x91\x1c\x65\xe9\xc9\xd4\x9f\x80\x73\x79\x8f\x8d\xc7\xa6\x04\xae\x31\x7b\x96\x6e\x70\x65\x61\x21\x4f\x3b\x95\x54\xf7\xb7\x75\x08\x69\xef\x33\xf9\x5b\xca\xce\x91\x7b\x91\xae\xdc\x91\x7b\xfe\x44\xfa\x5e\x35\xe2\x80\x02\xe6\x77\xac\x86\xa7\xff\x7f\xc0\xff\x04\x00\x00\xff\xff\x72\x5c\x1d\x01\xdd\x03\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 989, mode: os.FileMode(420), modTime: time.Unix(1509349918, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x95\xb7\x16\xb3\xc8\x12\x84\x73\x9e\xe2\xcf\x39\xf7\x08\x23\x5c\x38\x83\xf7\xc2\x9b\x0c\x01\xc2\x7b\x01\x42\x4f\x7f\xb5\xff\xa6\x3b\xe9\x74\x50\xe7\xeb\xaa\xae\xff\xfd\xf3\xa0\x28\xab\xd6\x1f\xd7\x03\x7f\x1e\xae\x1a\x02\x5f\xfc\xa3\x8b\xc9\xdf\x1f\xc4\x54\x55\x71\x3a\x55\x08\x80\xce\x03\x47\x04\x5b\x1f\x17\x64\xc7\x15\x82\x1c\xdc\x70\xa5\x0e\x23\x39\xa0\xe9\x39\xef\x04\x85\x39\x3e\x8f\xab\xc0\xa5\x79\x1f\xf2\x6d\x1b\xfd\x35\xae\x61\x43\x21\x5a\xcb\x45\xa7\x3d\x5b\x9e\xb9\xcb\xbc\x77\x93\x99\x4f\xba\x8b\xd4\x1d\x75\x5b\x28\x56\xf7\xa3\x39\x26\x06\xeb\x3f\xcc\xed\x41\x28\x26\x13\xd2\x24\x6a\xca\xe7\x62\x4d\xe2\x06\xc6\xe7\xba\xb4\x28\x12\xe0\x57\x19\xbe\xc9\xee\x58\x12\x2a\x56\x61\xd8\x17\xf3\xc1\x89\xfa\x25\x28\x1c\x51\xbc\xd3\x4f\x64\x4c\x79\x84\x4e\x81\xcb\x25\x73\x5b\x77\xaa\x45\x8d\xf8\x36\xe7\x7c\xca\x4d\x55\xa0\xf8\x31\x62\x70\x21\x69\xb2\x12\x76\x38\xc5\xee\x69\x2d\x7f\xa2\xe4\xd0\x72\xe8\x5e\xdb\xe3\xc4\x28\xf8\x9b\xf6\x17\x9b\x58\x19\x82\x21\xa2\x53\xe9\x1d\xaf\x82\xdd\x71\x0c\xa1\x1b\x0b\x91\x8e\x53\xf9\x1d\x31\xfb\xdb\xd4\x44\xe1\xc3\xab\xd3\x4f\x92\x38\x4e\xea\x7f\x23\x92\x09\x98\xba\x84\x71\xeb\x34\x02\x31\xe5\x8e\xe3\xa8\xf2\xa6\x91\x6b\xf5\x3a\x81\x59\x99\xca\x9c\x26\x35\x67\xda\xeb\x2c\xdc\x3d\x24\xc5\x9b\x7b\x6c\x47\xb9\x3f\xb4\x67\x6a\x55\xcf\x2e\x42\x31\xa5\xb2\xe5\x01\xa6\x06\xeb\xe0\x49\x87\x67\x68\xea\xa8\x02\x70\x00\x04\xd3\x0f\x36\xef\x46\xed\x5b\xb8\x7d\xf6\x13\xae\xa9\xf2\x45\xf6\x0b\x50\xac\xd4\x57\xf8\x4a\x14\x12\x3a\xc3\xf7\x97\x7b\x70\x2f\x7c\xab\x8e\x06\xfd\x2c\xdc\x02\x3a\xd0\xdc\x51\x5e\x89\xd3\x33\x5d\x55\x67\xdf\x6a\x1e\xbe\xef\xb5\x8f\x8b\x4d\xcf\xfb\xc2\x86\x7c\xeb\x20\xb3\x41\xf3\x14\x7a\xfb\xc7\x7a\x1c\x2c\x47\x87\x9a\x57\x35\xb8\x16\x5d\xbe\xba\xdd\x73\x7e\xba\x07\x97\x65\x1a\x94\xea\x96\xd6\x42\x27\x4c\x12\x3f\xc6\x8b\x53\x7b\xba\xe8\xfa\x13\x20\x5b\xfb\xd8\x74\x89\x5d\x9c\x70\x9f\x99\x72\x04\x2f\x90\x4c\xf1\xa9\x12\xdc\x79\x49\x9c\xce\x68\xf2\x44\xf4\x91\xd9\xde\x4f\x3a\x0d\xc9\x43\xcd\x54\xaf\xf8\xfa\xf1\x17\x7b\x71\xd2\x45\x10\x31\x86\x1c\x1f\x27\x7c\xb8\xb9\x42\x8e\x7c\xfd\xe2\xb6\x5b\x16\xf7\xd5\x02\xb0\x97\x6d\xbe\xe6\x39\x0a\x49\xb9\x09\xe9\x24\xae\xde\x50\xcc\xeb\x5d\x94\x9f\xb0\x09\xaf\xca\x4e\x28\x78\x62\x59\x38\x0b\x35\x22\xa4\xe1\xfd\x22\x9e\xdc\x6f\xe2\x4d\x4e\xd0\x10\x1d\x4c\x84\x04\x9f\xe9\x82\x6f\x3c\x68\x4d\xb0\x2d\x46\x3f\xe6\x93\xbc\x5b\xbe\x71\x82\xab\x04\x47\x33\xe9\xc2\x59\xba\x94\x41\xd3\x61\x64\x20\xbe\xdc\xe8\x78\x25\xf2\x55\x22\x02\xb2\x73\x99\x31\x66\x28\xd7\x77\x95\xe1\xa0\xad\x9e\x2d\x46\xb3\x63\x05\x17\x52\x59\xae\xa5\x9d\x09\x19\x5e\xec\xaa\x2f\x67\xfe\x9c\xe6\x5b\xdd\x22\x51\x11\xd2\xb3\x6c\xf5\xfa\x62\x8e\xc9\x1b\xb5\x9f\x28\x34\x97\xcf\xe9\xfd\x5d\x36\x2e\x37\x4a\x5f\x71\xa7\x43\x55\x67\xd5\xe6\xc9\xc8\x11\x67\x44\x31\x2b\xe3\xc5\x60\xce\xac\x47\x9d\x0a\x5d\x39\x01\x26\x20\x81\xe3\x81\x41\x2a\xbb\x84\xd0\x99\xb2\xaf\x87\x25\x4b\x38\x42\x29\xca\x6d\xf8\x0e\x51\xd9\x48\x99\xe0\x43\x12\x15\x71\xf7\xe4\xa0\x82\x85\x26\x24\x8a\x57\x91\x05\x7f\x15\x7f\xa3\x4c\x43\x8e\x1e\xd5\x57\xf3\xc0\x72\xba\xb3\x2a\x49\xd0\xea\xa7\x30\xeb\xd6\xc7\x1c\xdc\xb7\xde\x70\xbc\xa2\xc3\x30\x09\x7a\x2d\x0b\x92\xf6\xf8\x91\x67\x2f\x42\x75\x52\xf7\x75\x1d\x28\xdd\xe8\x1e\xbb\x23\xb7\xf3\xd5\x9d\x58\x5e\x8d\x30\x70\x2a\xac\xca\xae\xa1\xea\x9d\x1c\x33\x9b\xf1\xfa\xe0\x86\x25\x00\x93\xc5\x72\xd9\xfa\x39\xbf\x09\xa2\x38\xec\x82\x0c\x98\x74\xe1\xec\x37\x2c\x1c\x7c\x72\xd5\x91\x2f\x07\xe1\x49\x90\x3b\x7b\x85\xb4\x80\x93\x56\x45\x7c\x96\xd0\x53\xf3\x68\x76\x36\xa9\xa9\xa0\x8d\xab\xb1\x97\xff\x0b\x79\xf0\xeb\x29\xdd\x5e\x5f\x79\x38\xdc\xdd\xc2\xfa\x6b\x21\x6a\xc4\xe7\x8d\xdb\x49\xd8\xae\x63\xdf\x8c\xd1\xa9\x49\x41\x2b\xac\xe6\x39\xba\x2b\x1d\xa9\x82\x20\x9a\xbe\x96\x5e\xc5\xe4\x8c\xef\x25\xc7\xc8\xd8\x3a\xe0\x15\x50\x52\x2a\x89\x27\x99\x5f\x7e\x12\x94\xc8\xc2\x16\x0c\x99\xe5\x78\xfb\x12\x03\xaa\xdf\x82\xbb\xaf\xa7\x46\x9e\x48\xeb\x3b\x7f\xae\x4d\xdd\x60\xbb\x5f\x2f\x9e\xf9\x99\xe3\x21\x29\xb8\x2b\x27\x1e\x9a\xfe\x05\xf0\x7d\x0b\xc9\x89\xca\x48\x1b\x21\xa2\x2e\x84\xfe\x02\xf6\x27\x51\xf9\x76\x85\x26\x1f\x07\xc7\xf8\xee\x27\x19\x0a\x2f\x3d\xf5\x33\xea\x39\x62\x69\x71\x13\x5c\x5b\x69\x27\xfb\x6e\x8c\x7d\x11\xa9\x17\x1a\x27\xf7\xe3\x03\x4d\x0c\x49\xf0\x9c\x5f\xc3\x54\x9b\x4b\xe9\x6b\x9a\x2e\x27\xaf\x73\xe3\xdb\x98\xd3\x3e\x96\x93\x22\xfd\xbc\xd5\xa8\x5f\x36\xf0\x86\xf8\xfa\xd7\x91\x06\x24\x59\xaa\x23\x93\xba\x8b\x27\x80\xcf\xc1\x34\x06\xa2\x4e\x83\xe1\xb2\xea\x83\xeb\x8e\x07\x69\x15\x99\x3f\x74\x8f\xcf\x79\xed\xbc\xa3\xf5\x8b\x1d\x9b\x2e\x7c\x8c\x2f\x8c\xca\x1b\x72\x05\x09\xeb\xad\xd3\xb6\x68\xa6\xf8\xa5\xa7\x32\x2b\x63\xc7\xf3\x90\xbe\x0e\xb3\xf3\x17\xe1\x4a\xc8\xc6\xdf\x5d\x46\x41\xb9\xea\xba\x66\xf8\x8a\xa1\x8e\x85\xdf\x09\x19\x06\xd2\x87\x6c\x86\xfd\x49\x37\x23\xf9\x02\x35\x0e\xe2\xe9\x4d\xd4\xd5\x6f\x8b\x92\x2a\x9a\x48\xc4\xb4\xe9\xb8\xa2\x4e\xa9\x78\x6b\x8c\x7d\x4b\x9c\x4d\x15\xd3\x4f\x76\xd8\xe9\xb2\xf5\x1c\xdb\xad\x61\xcc\x8d\x16\xbb\x97\x49\x48\x6f\x09\xbb\x81\x66\xf4\xc9\xe9\x40\x1b\x2c\xf8\x88\x2f\x98\x21\x13\x6a\x96\x00\xaa\x0d\xeb\x90\x60\x91\x3f\x8c\xc5\x07\xba\x61\xeb\x5e\x9b\x16\x2c\xd1\xd3\x60\x14\x35\xd4\x1d\x33\xef\x39\xf3\x30\x23\x14\x75\x15\x7c\x80\xfc\xad\x14\xd1\x12\xfe\xbb\x6a\xfe\x1f\x00\x00\xff\xff\xc4\x9b\x8d\x41\x8b\x06\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 1675, mode: os.FileMode(420), modTime: time.Unix(1509349928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"tls": &bintree{nil, map[string]*bintree{
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

